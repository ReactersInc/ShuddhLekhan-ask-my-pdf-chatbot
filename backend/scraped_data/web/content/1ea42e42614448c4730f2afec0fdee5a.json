{
  "metadata": {
    "url": "https://jewelhuq.medium.com/foundations-of-operations-research-11b3eec34abf",
    "title": "# Foundations of Operations Research Operations Research is the application of **mathematical models...",
    "domain": "jewelhuq.medium.com",
    "extraction_date": "2025-08-16T05:37:15.697354",
    "content_quality": "high",
    "quality_score": 1.0,
    "content_type": "technical"
  },
  "content": {
    "title": "# Foundations of Operations Research Operations Research is the application of **mathematical models...",
    "summary": "# Foundations of Operations Research Operations Research is the application of **mathematical models**, **statistics**, and **algorithms** to help make **better decisions**. It‚Äôs used in areas like logistics, finance, manufacturing, healthcare, and more. OR = Math + Data + Decision-Making ## üí° Real-World Example: FedEx uses OR to decide the **most efficient delivery routes**, minimizing cost and time. Linear Programming: The Heart of OR **Linear Programming** is a method to: Maximize or minimize...",
    "full_text": "# Foundations of Operations Research Operations Research is the application of **mathematical models**, **statistics**, and **algorithms** to help make **better decisions**. It‚Äôs used in areas like logistics, finance, manufacturing, healthcare, and more. OR = Math + Data + Decision-Making ## üí° Real-World Example: FedEx uses OR to decide the **most efficient delivery routes**, minimizing cost and time. Linear Programming: The Heart of OR **Linear Programming** is a method to: Maximize or minimize alinearobjective function, subject to a set oflinearconstraints. You use LP when: - Your decisions are continuous (not restricted to integers) - Your constraints and objective involve only addition, subtraction, and multiplication (not exponents or non-linear equations) # ‚úèÔ∏è 3. Formulating an LP Problem ‚Äî Example **Scenario:** You run a factory that produces desks and chairs. - Profit: Desk = $50, Chair = $30 - Each desk needs: 4 hours labor, 3 units wood - Each chair needs: 3 hours labor, 2 units wood - Total labor available: 240 hours - Total wood available: 150 units ## üîß Formulation: Let: `x = number of desks` `y = number of chairs` `Objective Function:` Maximize Z = 50x + 30y Subject to constraints: 4x + 3y ‚â§ 240 (Labor) 3x + 2y ‚â§ 150 (Wood) x ‚â• 0, y ‚â• 0 (Can't make negative products) # ‚úçÔ∏è 4. Graphical Solution (for 2 variables) Graphing works only when you have **2 decision variables**. ## Steps: - Plot each constraint as an equation (turn ‚â§ into =). - Identify the **feasible region**(where all constraints overlap). - Find the **corner points**(vertices of the region). - Plug each corner into the objective function. - The one that gives **highest Z (for max)**or**lowest Z (for min)**is the**optimal solution**. Once problems grow beyond 2 variables or involve hundreds of constraints, we use the **Simplex Method**, a systematic and elegant way to navigate the feasible region **algebraically** Integer Programming (IP) & Mixed Integer Programming (MIP) In **Integer Programming**, some or all of the decision variables must be **integers** (whole numbers). You can‚Äôt make 2.4 delivery trucks, or hire 3.8 employees ‚Äî some decisionsmust be whole. # üß© 2. Why Use Integer Programming? Because **real-world decisions are discrete**: - Assigning jobs (1 person per job) - Routing (either use a path or not) - Investing in projects (yes/no decision) - Scheduling (assign shift slots as whole units) # Key Insight: Trade-Offs of Integer Programming **LP problems**are solved quickly (polynomial time)**IP/MIP problems**are**NP-hard**‚Äî exponentially complex- Solvers use **branch-and-bound**,**cutting planes**,**heuristics** # Network Optimization Models These are powerful tools used to **optimize flow, cost, and time** in systems that can be modeled as **networks (nodes + edges)**. # What is a Network? A **network** is made up of: **Nodes (vertices):**Locations, people, machines, etc.**Edges (arcs):**Connections between nodes (roads, wires, routes) # 3. The Shortest Path Problem **Objective:** Find the shortest (least cost) route from point A to point B. ## üõ£Ô∏è Example: You have a road network between cities, and you want to go from **City A to City D** with the least total travel cost. You assign weights to roads (edges), and use: **Dijkstra‚Äôs Algorithm**(for non-negative weights)**Bellman-Ford Algorithm**(if there are negative weights) ## Used in: **Google Maps**,**Uber**,**data packet routing**,**robotics navigation** # üì¶ 4. The Transportation Problem **Scenario:** You want to send goods from warehouses to stores at the lowest cost. ## Given: - Supply at each warehouse - Demand at each store - Shipping cost from each warehouse to each store ## Objective: Minimize total shipping cost while satisfying supply and demand constraints. üöõ Common in: **Retail chains (e.g., Walmart, Amazon)****Food delivery logistics****Oil & gas pipeline networks** ‚úÖ This is a **special LP model** with highly efficient solutions like the **Northwest Corner Rule**, **Vogel‚Äôs Approximation**, and **MODI Method**. # üë∑ 5. The Assignment Problem **Goal:** Assign `n` people to `n` tasks such that **total cost is minimized**, or **efficiency is maximized**. - 1 person per task - 1 task per person # üí° Used in: - Assigning drivers to delivery routes - Scheduling jobs to machines - Pairing employees with tasks in call centers - Uber matching drivers and riders Solved using: **Hungarian Algorithm**(classic, polynomial time)**MIP solvers**(formulated as 0/1 binary programming) # üß†What is Dynamic Programming? **Dynamic Programming** is a method for solving complex problems by breaking them down into **smaller overlapping subproblems**, solving each just **once**, and storing their results. If a problem can be broken into stages, and theoptimal solution depends on optimal solutions to subproblems, use DP. You‚Äôll see it used in everything from **resource allocation** to **route optimization**, **financial planning**, **inventory control**, and even **machine learning**. # üé≤ PHASE 6: Simulation Modeling # üß† 1. What is Simulation in Operations Research? Simulation is the process of **imitating the behavior of a real-world system over time**, especially when the system is too complex, random, or dynamic for a pure mathematical model. When the system is uncertain, too complex, or includes randomness ‚Üí useSimulation. You **don‚Äôt try to solve** the problem analytically ‚Äî you **simulate it repeatedly** under different conditions to understand outcomes. # ‚è±Ô∏è 5. Discrete Event Simulation (DES) Used for modeling things like: **Call centers****Hospital ER****Retail checkout lanes** Key concepts: **Entities**(e.g., customers)**Events**(e.g., arrival, service)**Queues**(lines/waiting)**Resources**(agents, nurses, cashiers) You track how events unfold **over time**, and measure KPIs like: - Average wait time - Server utilization - Abandonment rates Popular tools: **Simul8**,**Arena**,**AnyLogic**,**Simio**- Python libraries: `SimPy` ,`salabim` # How to Build a Simulation (General Steps) **Define the system**: What are you simulating? (cash flow, ER, factory line)**Identify input variables**: What‚Äôs random? What‚Äôs under your control?**Specify probability distributions**: e.g., arrival times ~ exponential, costs ~ normal**Build the logic**: What happens when? How does the system evolve?**Run simulations**: Usually 1,000 to 100,000+ iterations**Analyze results**: Use statistics to summarize KPIs, identify risks, test scenarios # ‚è≥ PHASE 7: Queuing Theory **Queuing Theory** is the mathematical study of **waiting lines (queues)** ‚Äî how they form, how long people wait, and how systems can be designed to minimize delays and costs. If your system involves **customers waiting** for **services with limited capacity**, you need Queuing Theory. These help you calculate how ‚Äúhealthy‚Äù your service system is. # üè¢ 5. Multi-Server Model: M/M/c Queue If you have multiple servers (e.g., 3 printers, 4 support agents): - c = number of servers - Queue formulas get more complex, but performance improves dramatically as **c increases** # üß† Tips for Using Queuing Theory - Keep **œÅ < 0.85**for good service quality - Use simulation if input data is non-exponential (real-world systems often are) - Combine with **inventory**,**simulation**, or**dynamic programming**for hybrid systems # Inventory Theory (Inventory Management Models) # üß† 1. What is Inventory Theory? Inventory Theory helps determine: How much to order and when to orderto minimize total cost, while avoiding stockouts and overstocking. We balance: **Holding Costs**(storage, insurance, depreciation)**Ordering Costs**(setup, delivery, admin)**Shortage Costs**(lost sales, backorders, penalties) It‚Äôs vital for: - Retailers (Amazon, Walmart) - Manufacturers (auto, pharma) - E-commerce (Shopify, ZilMoney product supply chain) Markov Decision Processes (MDPs) An **MDP** is a mathematical model for **sequential decision-making under uncertainty**. At every step (state), you choose an action ‚Üí outcome isprobabilistic, not certain ‚Üí system moves to anew state, and you earn areward. MDPs are foundational in: **Reinforcement Learning****AI & Robotics****Supply Chain Optimization****Finance & Portfolio Management****Healthcare Decision Systems** # üì¶ Example: Inventory Control as an MDP You manage stock (states), and each day: - Choose how much to reorder (actions) - Demand is random (probabilistic transition) - You earn sales (rewards) but pay holding/shortage costs The system evolves stochastically. MDPs help find the **optimal ordering policy** across time and uncertainty. # üß¨ PHASE 10: Metaheuristics # üß† 1. What Are Metaheuristics? Metaheuristics are **advanced problem-solving algorithms** designed to find **good-enough solutions** for **complex, hard-to-solve problems**, especially when: The problem isnonlinear,combinatorial,NP-hard, or lacks a neat analytical model. They don‚Äôt guarantee the *best* solution, but they often find *very good* ones, especially for large or chaotic search spaces. # üß© 2. Why Use Metaheuristics? Traditional methods (LP, IP, DP, etc.) struggle with: **Nonconvex functions****Discrete choices in huge spaces****Combinatorial explosions**(e.g., TSP, scheduling, job-shop)**Multi-objective optimization** Metaheuristics offer **flexibility** and **intelligence** to explore these spaces without brute force. # üî¨ 4. Deep Dive: Genetic Algorithms (GA) # üß¨ How GAs Work: **Initialize a population**of random solutions (chromosomes)**Evaluate fitness**of each (how good is it?)**Select parents**based on fitness**Crossover**to combine traits**Mutate**some individuals (exploration)**Repeat**until stopping condition is met They‚Äôre amazing for: - Scheduling employees - Designing supply chains - Hyperparameter tuning in ML - Optimizing custom cost functions # üßä 5. Simulated Annealing (SA) Based on the idea of **slow cooling** of metals to reach a low-energy state. - Starts with a high ‚Äútemperature‚Äù ‚Üí accepts worse solutions - As it ‚Äúcools,‚Äù becomes pickier - Helps avoid **local minima** Works well forTSP,machine layout,resource allocation # üéÆ BONUS MODEL: Game Theory # üß† 1. What is Game Theory? **Game Theory** is the study of **strategic interactions** where the outcome for one player depends not just on their decisions ‚Äî but also on the **decisions of others**. It‚Äôs the foundation of strategy, competition, and cooperation in OR, economics, and AI. Used heavily in: - Pricing wars - Auctions - Negotiations - Competitive markets - Cybersecurity - Military strategy",
    "sections": {
      "methodology": "routes**, minimizing cost and time. Linear Programming: The Heart of OR **Linear Programming** is a method to: Maximize or minimize alinearobjective function, subject to a set oflinearconstraints. You use LP when: - Your decisions are continuous (not restricted to integers) - Your constraints and objective involve only addition, subtraction, and multiplication (not exponents or non-linear equations) # ‚úèÔ∏è 3. Formulating an LP Problem ‚Äî Example **Scenario:** You run a factory that produces desks and chairs. - Profit: Desk = $50, Chair = $30 - Each desk needs: 4 hours labor, 3 units wood - Each c",
      "results": "g them down into **smaller overlapping subproblems**, solving each just **once**, and storing their results. If a problem can be broken into stages, and theoptimal solution depends on optimal solutions to subproblems, use DP. You‚Äôll see it used in everything from **resource allocation** to **route optimization**, **financial planning**, **inventory control**, and even **machine learning**. # üé≤ PHASE 6: Simulation Modeling # üß† 1. What is Simulation in Operations Research? Simulation is the process of **imitating the behavior of a real-world system over time**, especially when the system is too"
    },
    "word_count": 1517,
    "sentence_count": 75,
    "sentences": [
      "# Foundations of Operations Research Operations Research is the application of **mathematical models**, **statistics**, and **algorithms** to help make **better decisions**",
      "It‚Äôs used in areas like logistics, finance, manufacturing, healthcare, and more",
      "OR = Math + Data + Decision-Making ## üí° Real-World Example: FedEx uses OR to decide the **most efficient delivery routes**, minimizing cost and time",
      "Linear Programming: The Heart of OR **Linear Programming** is a method to: Maximize or minimize alinearobjective function, subject to a set oflinearconstraints",
      "You use LP when: - Your decisions are continuous (not restricted to integers) - Your constraints and objective involve only addition, subtraction, and multiplication (not exponents or non-linear equations) # ‚úèÔ∏è 3",
      "Formulating an LP Problem ‚Äî Example **Scenario:** You run a factory that produces desks and chairs",
      "- Profit: Desk = $50, Chair = $30 - Each desk needs: 4 hours labor, 3 units wood - Each chair needs: 3 hours labor, 2 units wood - Total labor available: 240 hours - Total wood available: 150 units ## üîß Formulation: Let: `x = number of desks` `y = number of chairs` `Objective Function:` Maximize Z = 50x + 30y Subject to constraints: 4x + 3y ‚â§ 240 (Labor) 3x + 2y ‚â§ 150 (Wood) x ‚â• 0, y ‚â• 0 (Can't make negative products) # ‚úçÔ∏è 4",
      "Graphical Solution (for 2 variables) Graphing works only when you have **2 decision variables**",
      "## Steps: - Plot each constraint as an equation (turn ‚â§ into =)",
      "- Identify the **feasible region**(where all constraints overlap)",
      "- Find the **corner points**(vertices of the region)",
      "- Plug each corner into the objective function",
      "- The one that gives **highest Z (for max)**or**lowest Z (for min)**is the**optimal solution**",
      "Once problems grow beyond 2 variables or involve hundreds of constraints, we use the **Simplex Method**, a systematic and elegant way to navigate the feasible region **algebraically** Integer Programming (IP) & Mixed Integer Programming (MIP) In **Integer Programming**, some or all of the decision variables must be **integers** (whole numbers)",
      "You can‚Äôt make 2",
      "4 delivery trucks, or hire 3",
      "8 employees ‚Äî some decisionsmust be whole",
      "Why Use Integer Programming",
      "Because **real-world decisions are discrete**: - Assigning jobs (1 person per job) - Routing (either use a path or not) - Investing in projects (yes/no decision) - Scheduling (assign shift slots as whole units) # Key Insight: Trade-Offs of Integer Programming **LP problems**are solved quickly (polynomial time)**IP/MIP problems**are**NP-hard**‚Äî exponentially complex- Solvers use **branch-and-bound**,**cutting planes**,**heuristics** # Network Optimization Models These are powerful tools used to **optimize flow, cost, and time** in systems that can be modeled as **networks (nodes + edges)**",
      "# What is a Network"
    ],
    "character_count": 10515
  },
  "embedding_metadata": {
    "content_type": "technical",
    "relevance_score": 1.0,
    "language": "en",
    "source_type": "web",
    "processing_version": "2.0",
    "extraction_method": "trafilatura"
  }
}