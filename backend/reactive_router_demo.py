"""
Reactive LLM Router Test Script
Demonstrates the reactive API management system without requiring real API keys
"""

import os
import sys
import time
from typing import Dict

# Add the backend directory to the path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from services.smart_api_manager import SmartAPIManager
from services.chunk_complexity_analyzer import ChunkComplexityAnalyzer
from services.reactive_router_status import ReactiveRouterStatus, quick_status_check


def simulate_api_responses():
    """Simulate different API response scenarios"""
    print("üß™ REACTIVE LLM ROUTER DEMONSTRATION")
    print("="*60)
    print("This demo shows how the reactive system handles different scenarios")
    print("without requiring actual API keys.\n")
    
    # Initialize components
    api_manager = SmartAPIManager()
    complexity_analyzer = ChunkComplexityAnalyzer()
    status_display = ReactiveRouterStatus(api_manager)
    
    # Simulate API keys for demo
    api_manager.api_configs['google_primary']['key'] = 'demo_key_1'
    api_manager.api_configs['google_secondary']['key'] = 'demo_key_2'
    api_manager.api_configs['groq']['key'] = 'demo_key_3'
    api_manager.api_configs['together_ai']['key'] = 'demo_key_4'
    api_manager.api_configs['openrouter']['key'] = 'demo_key_5'
    
    print("1Ô∏è‚É£  INITIAL STATUS - All APIs Ready")
    status_display.display_live_status()
    input("\nPress Enter to continue...")
    
    # Scenario 1: English content
    print("\n2Ô∏è‚É£  SCENARIO: English Technical Content")
    english_content = """
    Machine learning algorithms have revolutionized the field of artificial intelligence.
    Deep learning networks, particularly convolutional neural networks, have shown 
    remarkable performance in computer vision tasks.
    """
    
    analysis = complexity_analyzer.analyze_chunk(english_content)
    print(f"üìä Complexity Analysis: {analysis}")
    
    best_api = api_manager.get_best_api(analysis)
    print(f"üéØ Selected API: {best_api}")
    
    input("\nPress Enter to continue...")
    
    # Scenario 2: Hindi content
    print("\n3Ô∏è‚É£  SCENARIO: Hindi Content (Indic Script Priority)")
    hindi_content = """
    ‡§Æ‡§∂‡•Ä‡§® ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§è‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§§‡§ï‡§®‡•Ä‡§ï ‡§π‡•à ‡§ú‡•ã ‡§ï‡•É‡§§‡•ç‡§∞‡§ø‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§§‡•ç‡§§‡§æ ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç
    ‡§ï‡•ç‡§∞‡§æ‡§Ç‡§§‡§ø ‡§≤‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§°‡•Ä‡§™ ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§µ‡§ø‡§ú‡§º‡§® ‡§Æ‡•á‡§Ç
    ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡•á ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§
    """
    
    analysis = complexity_analyzer.analyze_chunk(hindi_content)
    print(f"üìä Complexity Analysis: {analysis}")
    
    best_api = api_manager.get_best_api(analysis)
    print(f"üéØ Selected API: {best_api} (Google prioritized for Indic script)")
    
    input("\nPress Enter to continue...")
    
    # Scenario 3: Simulate rate limit hit
    print("\n4Ô∏è‚É£  SCENARIO: Rate Limit Hit - Reactive Switching")
    print("Simulating rate limit error on Google Primary...")
    
    # Simulate rate limit error
    api_manager.record_api_call('google_primary', False, 
                               "429 Too Many Requests: Quota exceeded for requests per minute")
    
    status_display.display_live_status()
    
    # Try to get API again - should fallback
    best_api = api_manager.get_best_api(analysis)
    print(f"üîÑ After rate limit, selected API: {best_api}")
    
    input("\nPress Enter to continue...")
    
    # Scenario 4: Multiple failures
    print("\n5Ô∏è‚É£  SCENARIO: Multiple API Failures")
    print("Simulating failures on multiple APIs...")
    
    api_manager.record_api_call('google_secondary', False, 
                               "503 Service Temporarily Unavailable")
    api_manager.record_api_call('groq', False, 
                               "Authentication failed: Invalid API key")
    
    status_display.display_live_status()
    
    # Show available APIs
    available = api_manager.get_available_apis()
    print(f"üìã Still available APIs: {available}")
    
    input("\nPress Enter to continue...")
    
    # Scenario 5: Emergency reset
    print("\n6Ô∏è‚É£  SCENARIO: Emergency Recovery")
    print("Forcing all APIs back online...")
    
    api_manager.force_enable_all_apis()
    status_display.display_live_status()
    
    input("\nPress Enter to continue...")
    
    # Show routing strategy
    print("\n7Ô∏è‚É£  ROUTING STRATEGY EXPLANATION")
    status_display.display_routing_strategy()
    
    input("\nPress Enter to continue...")
    
    # Show API details
    print("\n8Ô∏è‚É£  API CONFIGURATION DETAILS")
    status_display.display_api_details()
    
    print("\n‚úÖ DEMO COMPLETE!")
    print("="*60)
    print("üéØ KEY BENEFITS OF REACTIVE APPROACH:")
    print("   ‚úì No artificial daily limits - reacts to real API responses")
    print("   ‚úì Immediate fallback when rate limits hit")
    print("   ‚úì Language-aware routing for better results")
    print("   ‚úì Google APIs prioritized for Indic languages")
    print("   ‚úì Automatic recovery after cooldown periods")
    print("   ‚úì Intelligent load balancing between APIs")
    print("="*60)


def quick_test():
    """Quick test of the reactive system"""
    print("‚ö° QUICK REACTIVE ROUTER TEST")
    print("-" * 40)
    
    # Setup
    api_manager = SmartAPIManager()
    complexity_analyzer = ChunkComplexityAnalyzer()
    
    # Simulate API keys
    for api_name in api_manager.api_configs:
        api_manager.api_configs[api_name]['key'] = f'demo_key_{api_name}'
    
    # Test different content types
    test_cases = [
        ("English Tech", "Machine learning algorithms optimize neural networks."),
        ("Hindi Text", "‡§Æ‡§∂‡•Ä‡§® ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§è‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§§‡§ï‡§®‡•Ä‡§ï ‡§π‡•à‡•§"),
        ("Complex Code", "def optimize_transformer_attention(q, k, v, mask=None): return scaled_dot_product_attention(q, k, v, mask)")
    ]
    
    for name, content in test_cases:
        print(f"\nüìù {name}:")
        analysis = complexity_analyzer.analyze_chunk(content)
        best_api = api_manager.get_best_api(analysis)
        print(f"   Language: {analysis.get('language', 'unknown')}")
        print(f"   Complexity: {analysis.get('complexity', 'unknown')}")
        print(f"   Selected API: {best_api}")
        print(f"   Has Indic Script: {analysis.get('has_indic_script', False)}")
    
    print("\n" + "-" * 40)
    quick_status_check(api_manager)


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Reactive LLM Router Demo")
    parser.add_argument("--quick", action="store_true", help="Run quick test")
    parser.add_argument("--full", action="store_true", help="Run full demo")
    
    args = parser.parse_args()
    
    if args.quick:
        quick_test()
    elif args.full:
        simulate_api_responses()
    else:
        print("Choose --quick for quick test or --full for complete demo")
        print("Example: python reactive_router_demo.py --quick")
