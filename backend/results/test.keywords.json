[
  {
    "section": "Unknown",
    "keywords": [
      "TACC",
      "AI",
      "Accelerator"
    ],
    "key_phrases": [
      "Secure Accelerator Enclave",
      "Trusted Accelerator",
      "AI Workloads"
    ],
    "key_points": [
      "TACC is a Secure Accelerator Enclave design.",
      "It protects AI workloads within a Trusted Execution Environment.",
      "Supports dynamic user switching and context clearing.",
      "Uses physical isolation of memory for full-stack isolation.",
      "Includes a hardware AES-GCM module for memory interaction.",
      "Prototypes implemented on an FPGA with Xilinx xc7z100-ffg900-2 chip.",
      "Average security overhead is no more than 1.76%."
    ]
  },
  {
    "section": "Jianping Zhu, Rui Hou∗, Dan Meng",
    "keywords": [
      "Security",
      "Research",
      "Institute"
    ],
    "key_phrases": [
      "Chinese Academy of Sciences",
      "Information Security",
      "Institute of Information Engineering"
    ],
    "key_points": [
      "Researchers are affiliated with the State Key Laboratory of Information Security.",
      "They are from the Institute of Information Engineering, Chinese Academy of Sciences.",
      "They are also associated with the School of Cyber Security, University of Chinese Academy of Sciences.",
      "Contact email for Rui Hou is provided."
    ]
  },
  {
    "section": "Abstract",
    "keywords": [
      "Security",
      "Enclave",
      "Isolation"
    ],
    "key_phrases": [
      "Trusted Execution Environment",
      "Secure Accelerator Enclave",
      "Physical Isolation"
    ],
    "key_points": [
      "Presents TACC, a Secure Accelerator Enclave design.",
      "Protects heterogeneous accelerators running AI workloads.",
      "Supports dynamic user switching and context clearing.",
      "Achieves full-stack isolation through physical memory isolation.",
      "Uses a dedicated hardware AES-GCM module.",
      "Implemented prototypes (FAT and SLIM) on an FPGA.",
      "Demonstrates a low average security overhead (≤ 1.76%)."
    ]
  },
  {
    "section": "1 Introduction",
    "keywords": [
      "Accelerator",
      "Security",
      "TEE"
    ],
    "key_phrases": [
      "Trusted Execution Environment",
      "Heterogeneous Architecture",
      "AI Workloads"
    ],
    "key_points": [
      "Accelerators are becoming increasingly important for AI workloads alongside CPUs and GPUs.",
      "Existing TEEs based on CPU architecture are insufficient for heterogeneous architectures.",
      "There's a need to extend secure enclave protection to accelerators.",
      "Current research on heterogeneous isolated execution environments focuses on CPU+GPU combinations.",
      "TACC focuses on the trusted reconstruction of the accelerator architecture itself.",
      "TACC utilizes the memory access hierarchy of accelerators for security.",
      "TACC adds a hardware DSC for context clearing and memory management.",
      "Physical isolation of the chip’s 3D package is used for full-stack isolation.",
      "TACC offers advantages over CPU+GPU TEEs due to accelerator's memory structure and customization potential."
    ]
  },
  {
    "section": "Background",
    "keywords": [
      "TEE",
      "Security",
      "Confidentiality"
    ],
    "key_phrases": [
      "Trusted Execution Environment",
      "Secure Communication",
      "Secure Boot"
    ],
    "key_points": [
      "TEE design principles include Confidentiality, Integrity, and Authentication.",
      "Confidentiality ensures secrets are invisible to untrusted parties.",
      "Integrity prevents tampering with data and communication.",
      "Authentication allows secure identification and channel establishment between user and enclave.",
      "Trusted platforms have secure boot and remote attestation mechanisms."
    ]
  },
  {
    "section": "2.2",
    "keywords": [
      "TEE",
      "memory",
      "security"
    ],
    "key_phrases": [
      "memory access hierarchy",
      "CPU TEE",
      "per-enclave page tables"
    ],
    "key_points": [
      "Building a heterogeneous TEE for AI workloads requires security primitive support in accelerator micro-architecture.",
      "CPU TEEs (Sanctum, SGX) use per-enclave page tables for memory isolation but may share memory hierarchy components, creating side channels.",
      "GPU memory hierarchy is managed by an untrusted OS driver, increasing security risks.",
      "CPU TEEs may allow sharing of LLC and TLB, creating side channels.",
      "Unencrypted address buses accessing off-chip DRAM in CPU TEEs create off-chip side channels."
    ]
  },
  {
    "section": "Accelerator Core",
    "keywords": [
      "accelerator",
      "memory",
      "buffers"
    ],
    "key_phrases": [
      "on-chip buffers",
      "unified memory space",
      "double-buffering mechanism"
    ],
    "key_points": [
      "Accelerators typically use on-chip buffers instead of complex caches and TLBs.",
      "DianNao series accelerators use Synapses Buffers (SB) and Neurons Buffers (NBin/NBout) for data caching.",
      "Accelerators employ a double-buffering mechanism to overlap memory access and PE calculations.",
      "Some accelerators are adopting local MMU designs for unified memory spaces, but still rely on OS support.",
      "TACC aims to isolate internal memory management from the untrusted OS."
    ]
  },
  {
    "section": "2.3",
    "keywords": [
      "packaging",
      "memory",
      "security"
    ],
    "key_phrases": [
      "3D IC packaging",
      "in-package memory",
      "off-package memory"
    ],
    "key_points": [
      "3D IC packaging is becoming mainstream, enabling integration of in-package memory.",
      "In-package memory is more secure than off-package memory due to difficulty of physical snooping.",
      "Memory access is a performance bottleneck in AI computing.",
      "TACC utilizes the physical isolation of in-package and off-package memory for security."
    ]
  },
  {
    "section": "TACC DESIGN",
    "keywords": [
      "TACC",
      "security",
      "enclave"
    ],
    "key_phrases": [
      "device security control",
      "encrypted communication",
      "secure enclave"
    ],
    "key_points": [
      "TACC adds DSC, Address Checker, and AES-GCM engine to the accelerator's memory access hierarchy.",
      "TACC cuts off the MMIO path for host CPU access to the accelerator.",
      "Communication between the host and TACC is through encrypted packets via xdma.",
      "TACC relies on a pure xdma driver and Oblivious Relay for communication.",
      "TACC shares AES keys between Remote User, CPU enclave, and TACC enclave for secure communication."
    ]
  },
  {
    "section": "3.2",
    "keywords": [
      "threat",
      "security",
      "adversary"
    ],
    "key_phrases": [
      "host OS",
      "ciphertext memory",
      "plaintext running memory"
    ],
    "key_points": [
      "The primary adversary is the OS (and other root privileged code) on the host CPU.",
      "TACC protects against attacks attempting to snoop or tamper with accelerator memory and registers.",
      "TACC only exposes ciphertext memory to the host, keeping plaintext memory within the chip package.",
      "Evasion and poisoning attacks on AI models are outside the scope of TACC's security guarantees.",
      "Denial of Service attacks are also outside the scope of this paper."
    ]
  },
  {
    "section": "3.3",
    "keywords": [
      "channel",
      "security",
      "enclave"
    ],
    "key_phrases": [
      "remote command channel",
      "task code channel",
      "secure communication"
    ],
    "key_points": [
      "Four types of secure channels are supported: Remote/Local-Command, and Task-Code/Data.",
      "Remote-Command channel is for enclave creation/destruction requests, using TACCenclaveCreate() and TACCenclaveDestory() functions.",
      "Local-Command channel manages TACC on-chip memory using TACCmalloc and TACCfree.",
      "TACC supports static memory allocation only.",
      "Address Checker verifies memory access permissions based on enclave ID.",
      "Task-Code channel transmits code instructions to the Accelerator Core.",
      "Task-Data channel transmits data to the Accelerator Core, potentially skipping the CPU enclave step for frequent data transfers.",
      "All channel packages are encrypted to protect sensitive information.",
      "Communication channel sizes and timing are data-oblivious to prevent snooping attacks."
    ]
  },
  {
    "section": "3.4",
    "keywords": [
      "memory",
      "address",
      "table"
    ],
    "key_phrases": [
      "memory occupancy table",
      "physical addressing",
      "address checker"
    ],
    "key_points": [
      "TACC uses a per-Accelerator Core memory occupancy table to manage memory access permissions.",
      "Unlike traditional CPU/GPU, TACC uses direct physical addressing and larger memory chunks.",
      "The memory occupancy table is implemented with a limited number of entries based on the number of memory chunks.",
      "DSC manages the memory occupancy table, setting and clearing entries.",
      "Allocation exceptions are generated if a memory chunk is already occupied.",
      "TACCfree clears the occupied flag and enclave ID, and overwrites the physical memory with zeros.",
      "All memory access requests are checked by the Address Checker against the occupancy table and enclave ID."
    ]
  },
  {
    "section": "Enclave ID",
    "keywords": [
      "address",
      "enclave",
      "memory"
    ],
    "key_phrases": [
      "physical address",
      "memory occupancy table",
      "enclave id"
    ],
    "key_points": [
      "The memory occupancy table stores the enclave ID associated with each memory chunk.",
      "The high bits of the 32-bit physical address are used as an index into the memory occupancy table.",
      "The Address Checker verifies that the enclave ID in the table matches the current enclave ID during memory access.",
      "If the enclave ID does not match, a memory exception is generated."
    ]
  },
  {
    "section": "3.5",
    "keywords": [
      "encryption",
      "AES",
      "security"
    ],
    "key_phrases": [
      "AES-GCM engine",
      "integrity check",
      "replay attacks"
    ],
    "key_points": [
      "TACC implements a 128-bit AES-GCM hardware encryption/decryption module.",
      "AES-GCM performs integrity checks and generates MAC check codes.",
      "Unique package IDs prevent replay and rollback attacks.",
      "The AES-GCM module is the sole interface between internal and external memories.",
      "Data packets are only forwarded if they pass the AES-GCM checks, isolating TACC from untrusted host OS."
    ]
  },
  {
    "section": "IMPLEMENTATION",
    "keywords": [
      "FPGA",
      "platform",
      "memory"
    ],
    "key_phrases": [
      "AX7Z100",
      "FPGA development board",
      "PCIe x8 interface"
    ],
    "key_points": [
      "AX7Z100 is used as the prototype implementation platform, similar to Xilinx ZC706.",
      "It features a Xilinx xc7z100-ffg900-2 chip and a PCIe x8 endpoint interface.",
      "1 GB of PL side memory is utilized, half for ciphertext and half for plaintext."
    ]
  },
  {
    "section": "4.2",
    "keywords": [
      "RepVGG",
      "network",
      "FPGA"
    ],
    "key_phrases": [
      "convolutional neural network",
      "ImageNet-2012",
      "fixed-point processing"
    ],
    "key_points": [
      "RepVGG-A0 is chosen as the AI workload due to its relatively small network size.",
      "RepVGG-A0 can classify 1000 ImageNet classes with a Top-1 accuracy of 72.41%.",
      "The network has 24 layers and approximately 8.30M parameters, requiring 16MB of storage with 16-bit fixed-point processing.",
      "SLIM core has 36 multipliers (4x9), and FAT core has 144 multipliers (16x9).",
      "Buffer sizes are adjusted based on core type (SLIM: 1552KB, FAT: 1600KB).",
      "The current prototype implements only a single Accelerator Core with one PE."
    ]
  },
  {
    "section": "4.3",
    "keywords": [
      "instructions",
      "memory",
      "buffers"
    ],
    "key_phrases": [
      "task instructions",
      "memory access",
      "Cambricon instruction set"
    ],
    "key_points": [
      "TACC instructions are divided into security-related instructions (executed by DSC) and task instructions (executed by the Accelerator Core).",
      "TACC task instructions are based on the Cambricon instruction set but simplified and modified.",
      "Task instructions are categorized into memory access and calculation types.",
      "Memory access instructions include TLOAD, TSTORE, TCOPY, and TCLEAR.",
      "A 'mask' field is added to instructions for selective buffer access.",
      "Addressing mode for memory is 'base address + immediate offset'.",
      "Calculation instructions (TEXEC) support convolutional, fully connected, and global average pooling layers.",
      "Instructions are executed in-order by the Scheduler."
    ]
  },
  {
    "section": "4.4",
    "keywords": [
      "memory",
      "enclave",
      "security"
    ],
    "key_phrases": [
      "explicit memory management",
      "Oblivious-Relay",
      "ECALLs functions"
    ],
    "key_points": [
      "TACC does not support direct pointer sharing between host CPU and device.",
      "Memory must be explicitly allocated and freed by the programmer.",
      "Memory chunks exceeding on-chip capacity require manual swapping to off-chip memory (with encryption/decryption).",
      "TACC requires ECALLs for transferring Remote Commands and Task Code into the CPU enclave.",
      "OCALLs are used to transfer Local Commands and Task Code out of the CPU enclave.",
      "Oblivious-Relay forwards ciphertext packets to the TACC device, reducing encryption/decryption overhead."
    ]
  },
  {
    "section": "Evaluation",
    "keywords": [
      "overhead",
      "performance",
      "security"
    ],
    "key_phrases": [
      "encryption overhead",
      "throughput overhead",
      "batch size"
    ],
    "key_points": [
      "The impact of security-related hardware (AES-GCM, DSC, Address Checker) on performance is evaluated.",
      "Baseline performance is established using plaintext relay functions.",
      "Latency overhead is about 40x higher when network weights need to be temporarily loaded.",
      "Maximum latency overhead is 1.76%.",
      "Throughput overhead is 3.5x higher for the FAT core compared to the SLIM core.",
      "Batch size = 16 is a turning point for minimizing overhead.",
      "Overhead is expected to remain below 1.76% with future expansion of accelerator resources and AES engines."
    ]
  },
  {
    "section": "Security Analysis",
    "keywords": [
      "security",
      "encryption",
      "memory"
    ],
    "key_phrases": [
      "ciphertext area",
      "symmetric secret key",
      "data-oblivious"
    ],
    "key_points": [
      "The TACC chip's on-chip memory is inaccessible to a privileged adversary like the host OS.",
      "The TACC system prevents host CPU access to device registers and on-chip memory via MMIO.",
      "TACC handles exceptions internally by encrypting information and sending it to the CPU enclave/Remote User, avoiding untrusted OS interruption.",
      "All communication between TACC, CPU, and Remote User is encrypted using a shared symmetric key.",
      "Ciphertext data packet timing and size are data-oblivious to prevent attacks."
    ]
  },
  {
    "section": "Related Work",
    "keywords": [
      "TEE",
      "GPU",
      "enclave"
    ],
    "key_phrases": [
      "CPU TEE",
      "hardware-independent Security Controller",
      "trusted reconstruction"
    ],
    "key_points": [
      "Early Trusted Execution Environment (TEE) research focused on CPUs like SGX and TrustZone.",
      "Recent work extends CPU TEEs to GPUs, such as Graviton and HIX.",
      "Telekine provides data-oblivious streams to enhance security in GPU TEE interactions.",
      "HETEE uses a Security Controller for secure channel management, but reduces resource utilization.",
      "Existing solutions do not address the trusted reconstruction of the accelerator architecture itself.",
      "Protecting only parts of the AI pipeline may not guarantee integrity due to potential tampering outside the enclave.",
      "TACC provides a heterogeneous enclave that protects hardware AI accelerators, unlike previous approaches."
    ]
  },
  {
    "section": "Conclusion",
    "keywords": [
      "TACC",
      "accelerator",
      "security"
    ],
    "key_phrases": [
      "secure accelerator enclave",
      "on-chip memory",
      "hardware security mechanism"
    ],
    "key_points": [
      "The paper introduces TACC, a secure accelerator enclave design.",
      "TACC isolates the accelerator's memory management from the untrusted host OS.",
      "Dedicated instructions (TACCmalloc/TACCfree) and commands (TACCenclaveCreate/Destroy) are designed for memory management and user switching.",
      "Two TACC prototypes (FAT core and SLIM core) were implemented on an FPGA platform.",
      "The maximum overhead of TACC's hardware security mechanism is 1.76%.",
      "TACC is the first design of its kind for emerging accelerator architectures."
    ]
  },
  {
    "section": "ACKNOWLEDGMENTS",
    "keywords": [
      "funding",
      "reviewers",
      "support"
    ],
    "key_phrases": [
      "insightful comments",
      "National Science Foundation",
      "Distinguished Young Scholars"
    ],
    "key_points": [
      "The authors thank Prof. Christian Wressnegger and anonymous reviewers for their feedback.",
      "The work was supported by the Chinese National Science Foundation grant No.62125208."
    ]
  }
]